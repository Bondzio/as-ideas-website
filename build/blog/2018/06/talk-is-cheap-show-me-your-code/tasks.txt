# PHP-Test

This test is for developers with the focus on PHP.
The overall task is to connect to a database and create a REST-API.

Please work on as much as you can in affordable time.
Please rather deliver less in high quality than more in lesser quality.

Your code should be production ready.

Hints:

   * Use the IDE, Tools, Librarys or Framework you are most comfortable with
   * Prefer simple solutions - don't make it too fancy


## Task 001 - Setup & Build-Tools

   * Create a project setup with your favorite build tool
   * Your build should generate a deployable artifact, eg. it should be deployable

## Task 002 - Unit-Test

   * Write a unit tests for the class ArraySorter
   * Your build should run the tests automatically on each build
   * Explain the reasons for your test-cases as doc/comment

    class ArraySorter
    {
        public function sortArray($array = null)
        {
            $result = $array;
            sort($result);
            return $result;
        }
    }

## Task 003 - Database

   * Connect your application to our database
   * The database has two entities, stars and universes
   * A star has one universe, a universe has multiple stars
   * The database is a mysql database
       * host: phpasideas.cnuqfkvqp2zl.us-west-2.rds.amazonaws.com
       * Port: 3306
       * Database: phpasideas
       * username: phpdev
       * password: phpdev

## Task 004 - Rest-API

   * Expose all universes in your first endpoint
   * A second endpoint should have the universe id as path parameter and should
     return all stars from this universe
   * Your API should be RESTful expose all data as JSON

## Task 005 - Website

   * Create a simple website with a button to display the results from your API
      * Display all universes
      * Display all stars from a choosen universe
   * You should have an input form for choosing an id of an universe

## BONUS-Task A

   * Give a string - write 3 different methods to reverse the string
   * Eg. "qwerty" would become "ytrewq"

## BONUS-Task B

   * Security -  Check out this code and think about issues in the code

    <?php

    $users = array(
        "0:9b5c3d2b64b8f74e56edec71462bd97a",
        "1:4eb5fb1501102508a86971773849d266",
        "2:facabd94d57fc9f1e655ef9ce891e86e",
        "3:ce3924f011fe323df3a6a95222b0c909",
        "4:7f6618422e6a7ca2e939bd83abde402c",
        "5:06e2b745f3124f7d670f78eabaa94809",
        "6:8e39a6e40900bb0824a8e150c0d0d59f",
        "7:d035e1a80bbb377ce1edce42728849f2",
        "8:0927d64a71a9d0078c274fc5f4f10821",
        "9:e2e23d64a642ee82c7a270c6c76df142",
        "10:70298593dd7ada576aff61b6750b9118"
    );

    $valid_user = false;

    $input = $_COOKIE['user'];
    $input[1] = md5($input[1]);

    foreach ($users as $user) {
        $user = explode(":", $user);
        if ($input === $user) {
            $uid = $input[0] + 0;
            $valid_user = true;
        }
    }

    if (!$valid_user) {
        die("not a valid user\n");
    }

    if ($uid == 0) {

        echo "Hello Admin How can I serve you today?\n";
        echo "SECRETS ....\n";

    } else {
        echo "Welcome back user\n";
    }